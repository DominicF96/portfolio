import client from "@sendgrid/client";
import { NextResponse } from "next/server";

// Vercel environment variables
const SENDGRID_API_KEY = process.env.SENDGRID_API_KEY;
if (!SENDGRID_API_KEY) throw new Error("[SENDGRID_API_KEY] is required");
client.setApiKey(SENDGRID_API_KEY);

export async function POST(req: Request) {
  const reqData: {
    firstname: string;
    lastname: string;
    email: string;
    company: string;
    reason: string;
    message: string;
    requested_at: string;
  } = await req.json();
  const { firstname, lastname, email, company, reason, message, requested_at } =
    reqData;

  if (!email) {
    console.log(`No email provided.`);
    return NextResponse.json({ error: "invalid email" }, { status: 400 });
  }

  const url = "/v3/mail/send";
  const data = {
    personalizations: [
      {
        to: [{ email: "contact@dominicfournier.com", name: "Dominic" }],
        subject: "ðŸ¤– PORTFOLIO | Contact Request Received",
      },
    ],
    content: [
      {
        type: "text/plain",
        value: [
          "Hello!\n",
          "This email was generated by your portfolio ðŸ¤–.",
          "A user requested to be contacted.\n",
          "Here is the information of the user:\n",
          `Firstname: ${firstname}`,
          `Lastname: ${lastname}`,
          `Email: ${email}`,
          `Company: ${company}`,
          `Reason: ${reason}`,
          `Message: ${message}`,
          `Request Time: ${requested_at}`,
          "Please follow up ASAP!\n",
          "Thanks!\n",
          "~ YOUR FAVORITE BOT"
        ].join("\n"),
      },
    ],
    from: { email: "no-reply@dominicfournier.com", name: "noreply" },
  };

  try {
    await client.request({ url, method: "POST", body: data });
    console.log(`Contact request sent.`);
    return NextResponse.json(
      { status: "ok", message: "Contact request sent" },
      { status: 200 }
    );
  } catch (e: any) {
    if (e.code === 401) {
      const msg = { code: 401, message: "Maximum Limit Reached!" };
      console.log(`Unable to send contact request.`);
      return NextResponse.json(msg, { status: 401 });
    } else {
      const msg = { code: 400, message: e };
      console.log(`Unable to send contact request.`);
      return NextResponse.json(msg, { status: 400 });
    }
  }
}
